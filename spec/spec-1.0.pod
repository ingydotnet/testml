=head1 TestML

A Software Testing Meta Language. Version 1.0.

=head1 Status

Working Draft - 10 May, 2009

This document is not the final 1.0 release. It is very new, under
review, and undergoing initial implementation and testing.

=head1 Overview

B<TestML> is a meta language for writing tests that define how a piece
of software should behave, regardless of the programming language the
software is written in.

It is primarily intended for generic libraries or modules that are
relevant in many languages, or that have multiple implementations in the
same language. In these scenarios the different implementations can all
use the exact same tests. However, TestML's clarity and ease of use may
make it desirable for testing all types of software.

TestML documents define a set of data points and an abstract set of
transforms that invoke the application being tested. The transforms
alter given data points into new states. Then assertions can be made
between the altered data points and expected result data points. Here is
a simple example:

    testml: 1.0
    input.uppercase() == output
    === Test mixed case string
    --- input: I Like Pie
    --- output: I LIKE PIE
    === Test lower case string
    --- input: i love lucy
    --- output: I LOVE LUCY

In this case, a programmer of any given language would do the following:

=over

=item * Implement a library "Foo" that can turn strings to upper case.

=item * Implement a TestML "bridge class" that defines the 'uppercase'
transform to invoke the Foo library's upper casing facility.

=item * Set up their test environment to use TestML to run the test.

=back

=head1 History

The concept of TestML was heavily inspired by Ward Cunningham's B<FIT>
test framework. The primary difference is that FIT's test documents are
table/spreadsheet based, where TestML's are text file based. This reflects
the premise that FIT caters to business application development (where
spreadsheets are heavily used), while TestML caters to open source
library authors (where everything is in text files).

The specifics of TestML, and the data format specifically, evolved
directly from Ingy d√∂t Net's data-driven Perl testing framework,
B<Test::Base>. Test::Base was written in 2004 and later ported to
JavaScript. As Ingy ported various libraries to other languages, he
realized the potential value of making the test suites reusable.

=head1 Design Goals

TestML has the following Design Goals:

=over

=item Platform Agnosticism

TestML strives to make no assumptions about the programming language,
environment, or testing framework it will be used in. In this way, the
same corpus of test documents can be used against multiple
implementations of equivalent software.

=item Readability

TestML lets you define tests that are easy for both you and others to
write, read and maintain. The format is intended to let the data points
and test conditions stand out, while hiding the details of
implementation in the I<bridge class>.

=item Extensibility

TestML has been designed with acknowledgement that it will need to
evolve to meet many various testing requirements. For this reason, every
document requires a TestML version number. Also the original grammar has
been made quite strict, leaving a lot of room for future extension.

=item Ease of Implementation

TestML is designed to be fairly easy to implement in various programming
languages.

The TestML project has a set of tests (written in TestML) that a TestML
implementation must pass to be compliant. See L<http://testml.org/tests/>.

=back

=head1 Terminology

TestML uses a number of specific terms. The following glossary lists the 
terms and defines their meanings.

=over

=item Application

The software that is being tested.

=item Assertion

A I<test assertion> is a statement in the I<TestML document> that
compares two I<data expressions> using a I<testing operator>.

=item Block

A I<data block> is an object that contains a set of named I<data
points>. The block usually has a short label phrase. When the
tests are run, the I<runner class> will run each of the I<test
assertions> against each of the I<data blocks> that contain the I<data
points> needed by the assertion.

=item Bridge

Every test setup defines a class that connects named I<data transforms>
to the software being tested. This is known as a I<bridge class>,
because it bridges the test to the application or library.

=item Document

A I<TestML document> is a file containing some number of I<test
assertions> and I<data blocks>. This specification describes the format
of such a document.

=item Expression

A I<data expression> is a I<data point> name followed by zero or more
calls to named I<data transforms>.

A I<test assertion> compares the result of two data expressions.

=item Meta

A I<TestML document> can define a number of key/value pairs which are
considered I<meta data> and are used to instantiate a I<meta object>
that the test code can later access.

=item Operator

A I<testing operator> is a method that compares the final state of two
data points. The only operator currently defined by TestML is the '=='
operator, which compares two unicode strings for an exact match.

=item Point

A I<data point> is a named piece of data that belongs to a given I<data
block>. All data points are assumed to start out as unicode strings,
although a I<data transform> may turn them into anything else.

=item Runner

The TestML class that is responsible for running all the
appropriate tests.

=item Section

Every I<TestML document> has two sections, a I<head section> and a
I<data section>. The former specifies I<meta information> and the I<test
assertions> that the document is declaring. The latter section defines
the I<data blocks> against which the test assertions are applied.

=item Transform

A I<transform> is a method provided by a I<bridge class> that changes a
I<data point> from one form into another. A transform usually invokes
functionality of the I<application> it is testing. The whole idea of
TestML is that by passing a data point through one or more transforms,
you can make it equivalent to some other data point, causing the
test to pass.

=back

=head1 The Specification

To simplify the TestML Specification, it is defined by both a I<set of
BNF grammars> and a I<set of constraints>. The grammars include a I<top
level document grammar> and a separate I<TestML data section grammar>.
The data section is separate, because it may be marked up in any of
several syntaxes.

=head2 Grammar Operators and Primitives

This is a list of the special characters used in the grammars. They are
mostly borrowed from the PCRE regexp standard.

=over

=item * ' | ' - Alternation

=item * ' - ' - Exclusion

=item * '* ' - Zero or more

=item * '+ ' - One or more

=item * '? ' - Zero or one

=item * '(...)' - Parentheses indicate grouping

=back

The following primitives are defined in terms of their PCRE regexp
equivalents.

NOTE: There is a premise that only printable characters are allowed in a
      TestML document stream. The primitives therefore implicitly
      exclude control characters and such.

=over

=item * ANY - '[\s\S]' - Any unicode character

=item * SPACE - '[\ \t]' - A space or tab character

=item * BREAK - '\n' - A newline character

=item * EOL - '\r?\n' - A Unix or DOS line ending

=item * EOF - '$' - End of entire file/stream

=item * NON-SPACE - '\S' - A non-space character

=item * NON-BREAK - '.' - Any character except newline

=item * ALPHA - '[A-Za-z]' - ASCII alphabetic character

=item * ALPHANUM - '[A-Za-z0-9]' - ASCII alpha numeric character

=item * WORD - '\w' - ie '[A-Za-z0-9_]' - A "word" character

=item * BACK - '\' - A backslash character

=item * SINGLE - "'" - A single quote character

=item * DOUBLE - '"' - A double quote character

=item * ESCAPE - '[0abenrtz]' - One of the escapable character IDs

=back 

=head2 Top Level Document Grammar

=over

=item document := meta-section test-section data-section?

A TestML Document consists of 3 sections, a meta section followed by a
test section followed by an optional inline data section.

Here is an example document:

    # TestML document head section includes:
    # Meta statements,
    testml: 1.0
    key1: value1
    # And test assertions.
    foo.upper() == bar
    foo == bar.lower()

    # The data section defines data objects.
    === Test vowels
    --- foo: i ie ie
    --- bar: I IE IE
    === Test consonants
    --- foo
    lk p
    --- bar
    LK P

=item head-section :=
    ( meta-statement | test-statement | comment | blank-line )+ terminator

The head section contains both general information (meta statements)
about the test document and the definitions of the assertions the test
is declaring (test statements).

The parsing of the head section should instantiate two TestML objects:
the Meta object and the Tests object.

=item meta-statement := keyword ':' SPACE+ value EOL

Meta statements are key/value pairs separated by a colon and a
SPACE. A given meta setting may affect the document parsing from
that point forward.

=item keyword := WORD*

A keyword is the name of a meta setting. See L</Valid Meta Keywords> for the
valid values.

=item value := NON-SPACE (NON-BREAK* NON-SPACE)?

A value is a non blank, non empty, single line phrase of characters.

=item test-statement := data-expression | test-assertion

A test statement is a processing directive for running tests. A
statement can either be a single data-expression, which causes code to
run but doesn't execute tests, or it can be an assertion which runs a
test operation by comparing the results of two data expressions.

=item test-assertion :=
    data-expression SPACE+ operator SPACE+ data-expression EOL

A test assertion is a declaration of a testing operation. A typical
assertion looks like:

    input-point.transform1().transform2(arguments) == expected-output-point

=item data-expression := point-name transform-call*

A data transform is a data point name followed by zero or more data
transform calls.

=item point-name := ALPHA WORD*

A point name is the name of a data point defined in the data section of
the document.

=item transform-call := '.' transform-name '(' argument-list ')'

A transform call is like a method call in Python. A '.' invokes a named
transform/method with a list of arguments.

    .transform_name()

=item transform-name := APLHA WORD*

A transform name is a like a method name in a programming language.

    thisIsTheTransformName

=item argument-list := ( argument (',' SPACE argument)* )?

Currently the only thing allowed in an argument list is a list of
strings. The list can be empty and usually is.

=item argument := point-name | quoted-string

An argument passed to a transform call can be a data point name or a
quoted string. If it is a point name, the original value of that data
point will be passed to the transform when the test is run.

=item quoted-string := single-quoted-string | double-quoted-string

A quoted string can use either single or double quotes.

=item single-quoted-string :=
    SINGLE ((ANY - (BREAK | BACK | SINGLE)) | BACK SINGLE | BACK BACK)* SINGLE

A single quoted string has Perl semantics. A backslash is used to encode
a backslash or a single quote character.

    .foo('Won\'t you scratch\\slash my back?')

=item double-quoted-string :=
    DOUBLE ((ANY - (BREAK | BACK | DOUBLE)) |
    BACK DOUBLE | BACK BACK | BACK ESCAPE )* DOUBLE

A double quoted string has limited backslash escaping. You can encode a
backslash, double quote, newline or tab character.

    .bar("\tline 1\n\"line\" 2\n")

=item blank-line := SPACE* EOL

Blank lines are useful to space things out visually.

=item comment := '#' line

A comment is a line that begins with a '#'. A '#' anywhere else on a
line will not start a comment.

=item terminator := ('...' EOL) | EOF

A '...' line terminates the head section. The remaining content, if any,
is considered the data section.

=item data-section := testml-data-section | yaml-data-section | json-data-section | xml-data-section

The data section defines a sequence of data objects, each of which
consists of a short label phrase and a set of named data points.

TestML defines a default syntax, but this section can also be specified
in YAML, JSON or XML.

=item testml-data-section := testml-data-block-marker (SPACE | EOL) rest

The I<TestML data section> starts when the data block marker is detected
at the beginning of a line and continues to the end of the file. This
section is parsed into I<data block> objects.

Here is an example data section in TestML:

    === Test one
    --- input: abc
    --- output: 123
    === Test two
    --- input: xyz
    --- output: 321

See L<TestML Data Section Grammar> for the more formal syntax grammar of
this format.

=item yaml-data-section :=  '---' (SPACE | EOL) rest

Here is an example data section in YAML:

    ---
    - -label: Test one
      input: abc
      output: 123
    - -label: Test two
      input: xyz
      output: 321

=item json-data-section :=  '[' rest

Here is an example data section in JSON:

    [
      {
        "-label": "Test one",
        "input": "abc",
        "output": "123"
      },
      {
        "-label": "Test two",
        "input": "xyz",
        "output": "321"
      }
    ]

=item xml-data-section :=  '<' rest

    <testml>
      <block label="Test one">
        <input>abc</input>
        <output>123</output>
      </block>
      <block label="Test two">
        "input": "xyz",
        "output": "321"
      </block>
    </testml>

=item rest := ANY+

The I<rest> token is simply the remainder of the text in the file.
The I<data sections> are all parsed by separate parsers/grammars.

=back

=head2 TestML Data Section Grammar

This grammar defines the TestML data section markup.

=over

=item data-section := data-block*

A data section consists of 0-n data blocks.

=item data-block := block-header (blank-line | comment)* data-point*

A data block in TestML syntax looks like:

    === Block Label
    --- point1: phrase data
    --- point2
    line
    data

=item block-header := block-marker (SPACE block-label)? SPACE* EOL

A block header marks the start of a new block. The first one also marks
the start of the data section. It contains an optional label.

    === The next big test

=item block-marker := '===' | meta.testml_block_marker

A block marker is usually C<===>, but it is configurable via a meta
statement, like this:

    testml_block_marker: ***

=item data-point := lines-point | phrase-point

Data points are the pieces of raw data that TestML transforms and
compares. They come in two flavors, lines and phrases.

=item lines-point := point-marker point-name SPACE* EOL line*

A "lines" data point is a string containing zero or more lines. If it
has one or more lines it always ends with a newline.

    --- lines
    line1
    line2 (3 is blank)
    
    line4

=item phrase-point := point-marker point-name ':' SPACE NON-BREAK* EOL blank-line*

A "phrase" data point is a string with no newlines.

    --- phrase: This string is one line with no newline at the end.

=item point-marker := '---' | meta.testml_point_marker

A point marker is usually C<--->, but it is configurable via a meta
statement, like this:

    testml_point_marker: +++

=item line := NON-BREAK* EOL

A line is a string of zero or more non break characters followed by
a newline.

=back

=head2 TestML Document Constraints

The above grammars define the valid syntax for a TestML document, but
there is a also set of constraints that all TestML documents must
adhere to.

=head3 Document Encoding

All TestML documents are composed of the printable unicode character set
and I<must> be encoded in UTF8. Any character that does not meet these
requirements must cause an error.

=head3 Valid Meta Keywords

If the parser detects a meta keyword that is not listed below, it must
cause an error.

=over

=item testml - B<required>

The I<testml> meta statement is required and it must specify a version
number. The TestML implementation can then determine whether or not it
can process the document or not.

For example:

    testml: 1.0

As a guideline, TestML will attempt to be backwards compatible with
version numbers that have the same first number. So version 1.3 would be
backwards compatible with 1.2, 1.1 and 1.0. Version 2.0 would probably
break compatability.

=item title - I<optional>

The I<title> meta option specifies a short title phrase to describe the
entire TestML document.

    title: These are a few of my Favorite Tests!

The TestML implementation is free to use this meta field as it sees fit.

=item tests - I<optional>

The I<tests> meta option specifies the expected number of tests that
will be run by the runner. If the actual number differs the
implementation may complain or throw an error.

    tests: 13

=item testml_block_marker - I<optional>

If you choose to use the TestML data markup to encode your data section,
you can choose the character sequence to replace the default ('===').
You would wnat to do this primarily if you had '===' at the beginning of
a line in your data.

Setting this option causes the parser to immediately start looking for
the specified pattern to indicate the start of the data section.

    testml_block_marker: *=*

=item testml_point_marker - I<optional>

This option is the same as the testml_block_marker option above, except
it is for the data point marker.

    testml_point_marker: +++

=back

=head1 Authors

TestML Version 1.0 was created by Ingy d√∂t Net <ingy@ingy.net>

The spec was reviewed and/or contributed to by the following people:

=over

=item * Tony Bowden

=item * Chris Dent

=item * Yuval Kogman

=back

=head1 License

This work is licensed under the Creative Commons Attribution Share Alike
License. To view a copy of this license, visit
L<http://creativecommons.org/licenses/by-sa/3.0/legalcode>;
or, (b) send a letter to Creative Commons, 171 2nd Street, Suite 300,
San Francisco, California, 94105, USA.

=head1 Copyright

Copyright (c) 2009. Ingy d√∂t Net.

=cut
